// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  userId    String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes      Size[] @relation("StoreToSize")
  colors      Color[] @relation("StoreToColor")
  products      Product[] @relation("StoreToProduct")
  orders      Order[] @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id        String   @id @default(uuid()) @map("_id")
  storeId   String
  store     Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String 
  imageUrl String
  categories Category[] @relation("BillboardToCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category{
  id        String @id @default(uuid()) @map("_id")
  storeId   String
  store     Store @relation("StoreToCategory",fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation("BillboardToCategory",fields: [billboardId], references: [id])
  products Product[] @relation("CategoryToProduct")
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id        String   @id @default(uuid()) @map("_id")
  storeId   String
  store     Store    @relation("StoreToSize",fields: [storeId], references: [id])
  name      String
  value     String
  products Product[] @relation("SizeToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id        String   @id @default(uuid()) @map("_id")
  storeId   String
  store     Store    @relation("StoreToColor",fields: [storeId], references: [id])
  name      String
  value     String
  products Product[] @relation("ColorToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        String   @id @default(uuid()) @map("_id")
  storeId   String
  store     Store    @relation("StoreToProduct",fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId], references: [id])
  name      String
  price     Float
  isFeatured Boolean
  isArchived Boolean
  sizeId    String
  size      Size @relation("SizeToProduct",fields: [sizeId], references: [id])
  colorId    String
  color      Color @relation("ColorToProduct",fields: [colorId], references: [id])
  orderItem OrderItem[]
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid()) @map("_id")
  productId String
  product   Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order{
  id        String   @id @default(uuid()) @map("_id")
  storeId   String
  store     Store    @relation("StoreToOrder",fields: [storeId], references: [id])
  orderItem OrderItem[] 
  isPaid    Boolean @default(false)
  phone     String @default("")
  address   String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem{
  id        String   @id @default(uuid()) @map("_id")
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
